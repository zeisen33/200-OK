{"ast":null,"code":"import _regeneratorRuntime from\"/Users/zane/Desktop/GitHub/FSP/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/zane/Desktop/GitHub/FSP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";function csrfFetch(_x){return _csrfFetch.apply(this,arguments);}function _csrfFetch(){_csrfFetch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url){var options,res,_args2=arguments;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:options=_args2.length>1&&_args2[1]!==undefined?_args2[1]:{};// debugger\n// debugger\n// set options.method to 'GET' if there is no method\noptions.method=options.method||'GET';// set options.headers to an empty object if there are no headers\noptions.headers=options.headers||{};// if the options.method is not 'GET', then set the \"Content-Type\" header to\n// \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n// \"X-CSRF-Token\" cookie\nif(options.method.toUpperCase()!=='GET'){options.headers['Content-Type']=options.headers['Content-Type']||'application/json';options.headers['X-CSRF-Token']=sessionStorage.getItem('X-CSRF-Token');}// call fetch with the url and the updated options hash\n_context2.next=6;return fetch(url,options);case 6:res=_context2.sent;if(!(res.status>=400)){_context2.next=9;break;}throw res;case 9:return _context2.abrupt(\"return\",res);case 10:case\"end\":return _context2.stop();}},_callee2);}));return _csrfFetch.apply(this,arguments);}export var restoreCSRF=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return csrfFetch(\"/api/session\");case 2:response=_context.sent;storeCSRFToken(response);return _context.abrupt(\"return\",response);case 5:case\"end\":return _context.stop();}},_callee);}));return function restoreCSRF(){return _ref.apply(this,arguments);};}();export var storeCSRFToken=function storeCSRFToken(response){var csrfToken=response.headers.get(\"X-CSRF-Token\");if(csrfToken)sessionStorage.setItem(\"X-CSRF-Token\",csrfToken);};export default csrfFetch;","map":{"version":3,"names":["csrfFetch","url","options","method","headers","toUpperCase","sessionStorage","getItem","fetch","res","status","restoreCSRF","response","storeCSRFToken","csrfToken","get","setItem"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/csrf.js"],"sourcesContent":["async function csrfFetch(url, options = {}) {\n    // debugger\n    // debugger\n    // set options.method to 'GET' if there is no method\n    options.method = options.method || 'GET';\n    // set options.headers to an empty object if there are no headers\n    options.headers = options.headers || {};\n  \n    // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n    // \"X-CSRF-Token\" cookie\n    if (options.method.toUpperCase() !== 'GET') {\n      options.headers['Content-Type'] =\n        options.headers['Content-Type'] || 'application/json';\n      options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n    }\n  \n    // call fetch with the url and the updated options hash\n    const res = await fetch(url, options);\n  \n    // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n    if (res.status >= 400) throw res;\n  \n    // if the response status code is under 400, then return the response to the\n    // next promise chain\n    return res;\n}\n\nexport const restoreCSRF = async () => {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response);\n    return response;\n}\n\nexport const storeCSRFToken = (response) => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\n\n\nexport default csrfFetch"],"mappings":"kRAAeA,UAAS,yIAAxB,kBAAyBC,GAAG,wJAAEC,OAAO,kDAAG,CAAC,CAAC,CACtC;AACA;AACA;AACAA,OAAO,CAACC,MAAM,CAAGD,OAAO,CAACC,MAAM,EAAI,KAAK,CACxC;AACAD,OAAO,CAACE,OAAO,CAAGF,OAAO,CAACE,OAAO,EAAI,CAAC,CAAC,CAEvC;AACA;AACA;AACA,GAAIF,OAAO,CAACC,MAAM,CAACE,WAAW,EAAE,GAAK,KAAK,CAAE,CAC1CH,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,CAC7BF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,EAAI,kBAAkB,CACvDF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,CAAGE,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,CAC1E,CAEA;AAAA,uBACkBC,MAAK,CAACP,GAAG,CAAEC,OAAO,CAAC,QAA/BO,GAAG,qBAILA,GAAG,CAACC,MAAM,EAAI,GAAG,gCAAQD,IAAG,yCAIzBA,GAAG,0DACb,4CAED,MAAO,IAAME,YAAW,4FAAG,uKACAX,UAAS,CAAC,cAAc,CAAC,QAA1CY,QAAQ,eACdC,cAAc,CAACD,QAAQ,CAAC,CAAC,gCAClBA,QAAQ,uDAClB,kBAJYD,YAAW,0CAIvB,CAED,MAAO,IAAME,eAAc,CAAG,QAAjBA,eAAc,CAAID,QAAQ,CAAK,CACxC,GAAME,UAAS,CAAGF,QAAQ,CAACR,OAAO,CAACW,GAAG,CAAC,cAAc,CAAC,CACtD,GAAID,SAAS,CAAER,cAAc,CAACU,OAAO,CAAC,cAAc,CAAEF,SAAS,CAAC,CACpE,CAAC,CAID,cAAed,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}