{"ast":null,"code":"import csrfFetch from \"./csrf\";\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nconst RECEIVE_USER = 'users/RECEIVE_USER';\nconst REMOVE_USER = 'users/REMOVE_USER';\n\n// Action Creators\nexport const receiveUser = user => {\n  // debugger\n  return {\n    type: RECEIVE_USER,\n    user: user\n  };\n};\nexport const removeUser = userId => {\n  return {\n    type: REMOVE_USER,\n    userId: userId\n  };\n};\nconst setCurrentUser = user => {\n  // debugger\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\nconst removeCurrentUser = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\n\n// Thunk Action\nexport const loginUser = user => async dispatch => {\n  // debugger\n  const {\n    email,\n    password\n  } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem(\"currentUser\");\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const logoutUser = userId => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: 'DELETE'\n  });\n\n  // sessionStorage.setItem('currentUser', null)\n  storeCurrentUser(null);\n  dispatch(removeCurrentUser(userId));\n};\nexport const signup = user => async dispatch => {\n  const {\n    displayName,\n    email,\n    password\n  } = user;\n  const response = await csrfFetch(\"api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      displayName,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\n\n// Reducer\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","RECEIVE_USER","REMOVE_USER","receiveUser","user","type","removeUser","userId","setCurrentUser","payload","removeCurrentUser","loginUser","dispatch","email","password","response","method","body","JSON","stringify","data","json","storeCurrentUser","initialState","parse","sessionStorage","getItem","storeCSRFToken","csrfToken","headers","get","setItem","removeItem","restoreSession","logoutUser","signup","displayName","sessionReducer","state","action"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/session.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\n\nconst SET_CURRENT_USER = 'session/setCurrentUser'\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser'\nconst RECEIVE_USER = 'users/RECEIVE_USER'\nconst REMOVE_USER = 'users/REMOVE_USER'\n\n// Action Creators\nexport const receiveUser = (user) => {\n    // debugger\n    return {\n        type: RECEIVE_USER,\n        user: user\n    }\n}\n\nexport const removeUser = (userId) => {\n    return {\n        type: REMOVE_USER,\n        userId: userId\n    }\n}\n\nconst setCurrentUser = (user) => {\n  // debugger\n    return {\n      type: SET_CURRENT_USER,\n      payload: user\n    };\n  };\n  \n  const removeCurrentUser = () => {\n    return {\n      type: REMOVE_CURRENT_USER\n    };\n  };\n\n// Thunk Action\nexport const loginUser = (user) => async (dispatch) => {\n    // debugger\n    const { email, password } = user;\n    const response = await csrfFetch('/api/session', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nconst initialState = { user: JSON.parse(sessionStorage.getItem('currentUser')) }\n\nconst storeCSRFToken = (response) => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\")\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken)\n}\n\nconst storeCurrentUser = (user) => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user))\n    else sessionStorage.removeItem(\"currentUser\")\n}\n\nexport const restoreSession = () => async (dispatch) => {\n    const response = await csrfFetch(\"/api/session\")\n    storeCSRFToken(response)\n    const data = await response.json()\n    storeCurrentUser(data.user)\n    dispatch(setCurrentUser(data.user))\n    return response\n}\n\nexport const logoutUser = (userId) => async (dispatch) => {\n    const response = await csrfFetch('/api/session', {\n        method: 'DELETE'\n    })\n\n    // sessionStorage.setItem('currentUser', null)\n    storeCurrentUser(null)\n    dispatch(removeCurrentUser(userId))\n}\n\nexport const signup = (user) => async (dispatch) => {\n  const { displayName, email, password } = user;\n  const response = await csrfFetch(\"api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      displayName,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\n\n// Reducer\nconst sessionReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case SET_CURRENT_USER:\n        return { ...state, user: action.payload };\n      case REMOVE_CURRENT_USER:\n        return { ...state, user: null };\n      default:\n        return state;\n    }\n  };\n  \n  \nexport default sessionReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}