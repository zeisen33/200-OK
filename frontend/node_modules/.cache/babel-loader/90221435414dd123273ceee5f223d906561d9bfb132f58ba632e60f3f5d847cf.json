{"ast":null,"code":"import csrfFetch from \"./csrf\";\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nconst RECEIVE_USER = 'users/RECEIVE_USER';\nconst REMOVE_USER = 'users/REMOVE_USER';\n\n// Action Creators\nexport const receiveUser = user => {\n  // debugger\n  return {\n    type: RECEIVE_USER,\n    user: user\n  };\n};\nexport const removeUser = userId => {\n  return {\n    type: REMOVE_USER,\n    userId: userId\n  };\n};\nconst setCurrentUser = user => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\nconst removeCurrentUser = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\n\n// Thunk Action\nexport const loginUser = user => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify(user)\n  });\n  const res = await response.json();\n  storeCurrentUser(res.user);\n  dispatch(setCurrentUser(res.user));\n  return response;\n  // sessionStorage.setItem('currentUser', JSON.stringify(res.user))\n  // debugger\n  // dispatch(receiveUser(res.user))\n};\n\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem(\"currentUser\");\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const logoutUser = userId => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: 'DELETE'\n  });\n  sessionStorage.setItem('currentUser', null);\n  dispatch(removeUser(userId));\n};\n\n// Reducer\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    user: null\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // debugger\n  let newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_USER:\n      newState.user = action.user;\n      return newState;\n    case REMOVE_USER:\n      newState.user = null;\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","RECEIVE_USER","REMOVE_USER","receiveUser","user","type","removeUser","userId","setCurrentUser","payload","removeCurrentUser","loginUser","dispatch","response","method","body","JSON","stringify","res","json","storeCurrentUser","initialState","parse","sessionStorage","getItem","storeCSRFToken","csrfToken","headers","get","setItem","removeItem","restoreSession","data","logoutUser","sessionReducer","state","action","newState"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/session.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\n\nconst SET_CURRENT_USER = 'session/setCurrentUser'\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser'\nconst RECEIVE_USER = 'users/RECEIVE_USER'\nconst REMOVE_USER = 'users/REMOVE_USER'\n\n// Action Creators\nexport const receiveUser = (user) => {\n    // debugger\n    return {\n        type: RECEIVE_USER,\n        user: user\n    }\n}\n\nexport const removeUser = (userId) => {\n    return {\n        type: REMOVE_USER,\n        userId: userId\n    }\n}\n\nconst setCurrentUser = (user) => {\n    return {\n      type: SET_CURRENT_USER,\n      payload: user\n    };\n  };\n  \n  const removeCurrentUser = () => {\n    return {\n      type: REMOVE_CURRENT_USER\n    };\n  };\n\n// Thunk Action\nexport const loginUser = (user) => async (dispatch) => {\n    const response = await csrfFetch('/api/session', {\n        method: 'POST',\n        body: JSON.stringify(user)\n    })\n\n    const res = await response.json()\n    storeCurrentUser(res.user)\n    dispatch(setCurrentUser(res.user))\n    return response\n    // sessionStorage.setItem('currentUser', JSON.stringify(res.user))\n    // debugger\n    // dispatch(receiveUser(res.user))\n}\n\nconst initialState = {\n    user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n}\n\nconst storeCSRFToken = (response) => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\")\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken)\n}\n\nconst storeCurrentUser = (user) => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user))\n    else sessionStorage.removeItem(\"currentUser\")\n}\n\nexport const restoreSession = () => async (dispatch) => {\n    const response = await csrfFetch(\"/api/session\")\n    storeCSRFToken(response)\n    const data = await response.json()\n    storeCurrentUser(data.user)\n    dispatch(setCurrentUser(data.user))\n    return response\n}\n\nexport const logoutUser = (userId) => async (dispatch) => {\n    const response = await csrfFetch('/api/session', {\n        method: 'DELETE'\n    })\n\n    sessionStorage.setItem('currentUser', null)\n    dispatch(removeUser(userId))\n}\n\n// Reducer\nconst sessionReducer = (state={ user: null }, action) => {\n    // debugger\n    let newState = { ...state }\n\n    switch (action.type) {\n        case RECEIVE_USER:\n            newState.user = action.user\n            return newState\n        case REMOVE_USER:\n            newState.user = null\n            return newState\n        default:\n            return state\n    }\n}\n\nexport default sessionReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}