{"ast":null,"code":"import csrfFetch from \"./csrf\";\nimport { RECEIVE_QUESTION } from \"./questions\";\nconst RECEIVE_USER = 'api/RECEIVE_USER';\nconst RECEIVE_USERS = 'api/RECEIVE_USERS';\nconst receiveUser = user => {\n  return {\n    type: RECEIVE_USER,\n    user: user\n  };\n};\nconst receiveUsers = users => {\n  // debugger\n  return {\n    type: RECEIVE_USERS,\n    users: users\n  };\n};\nexport const getUsers = state => {\n  return state !== null && state !== void 0 && state.users ? Object.values(state.users) : [];\n};\nexport const fetchUser = userId => async dispatch => {\n  const res = csrfFetch(`/api/users/${userId}`, {\n    method: 'GET'\n  });\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(receiveUser(data));\n  }\n};\nexport const fetchAllUsers = () => async dispatch => {\n  const res = csrfFetch(`/api/users`, {\n    method: \"GET\"\n  });\n  // debugger\n  if (res.ok) {\n    const data = await res.json();\n    debugger;\n    dispatch(receiveUsers(data.users));\n  }\n};\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  Object.freeze(state);\n  let nextState = {\n    ...state\n  };\n  // debugger\n  switch (action.type) {\n    case RECEIVE_USER:\n      nextState[action.user.id] = action.user;\n      return nextState;\n    case RECEIVE_USERS:\n      // debugger\n      nextState = {\n        ...state,\n        ...action.users\n      };\n      // debugger\n      return nextState;\n    case RECEIVE_QUESTION:\n      nextState[action.payload.asker.id] = action.payload.asker;\n    default:\n      return state;\n  }\n};\nexport default usersReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_QUESTION","RECEIVE_USER","RECEIVE_USERS","receiveUser","user","type","receiveUsers","users","getUsers","state","Object","values","fetchUser","userId","dispatch","res","method","ok","data","json","fetchAllUsers","usersReducer","action","freeze","nextState","id","payload","asker"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/users.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\nimport { RECEIVE_QUESTION } from \"./questions\"\n\nconst RECEIVE_USER = 'api/RECEIVE_USER'\nconst RECEIVE_USERS = 'api/RECEIVE_USERS'\n\nconst receiveUser = (user) => {\n    return {\n        type: RECEIVE_USER,\n        user: user\n    }\n}\n\nconst receiveUsers = (users) => {\n    // debugger\n    return {\n    type: RECEIVE_USERS, \n    users: users\n    }\n}\n\nexport const getUsers = (state) => {\n    return state?.users ? Object.values(state.users) : []\n}\n\nexport const fetchUser = (userId) => async dispatch => {\n    const res = csrfFetch(`/api/users/${userId}`, {\n        method: 'GET'\n    })\n\n    if (res.ok) {\n        const data = await res.json()\n        dispatch(receiveUser(data))\n    }\n}\n\nexport const fetchAllUsers = () => async dispatch => {\n    const res = csrfFetch(`/api/users`, {\n        method: \"GET\"\n    })\n    // debugger\n    if (res.ok) {\n        const data = await res.json()\n        debugger\n        dispatch(receiveUsers(data.users))\n    }\n}\n\nconst usersReducer = (state={}, action) => {\n    Object.freeze(state)\n    let nextState = { ...state }\n    // debugger\n    switch (action.type) {\n        case RECEIVE_USER:\n            nextState[action.user.id] = action.user\n            return nextState\n        case RECEIVE_USERS:\n            // debugger\n            nextState = { ...state, ...action.users}\n            // debugger\n            return nextState\n        case RECEIVE_QUESTION:\n            nextState[action.payload.asker.id] = action.payload.asker\n        default: \n            return state\n    }\n}\n\nexport default usersReducer"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAC9B,SAASC,gBAAgB,QAAQ,aAAa;AAE9C,MAAMC,YAAY,GAAG,kBAAkB;AACvC,MAAMC,aAAa,GAAG,mBAAmB;AAEzC,MAAMC,WAAW,GAAIC,IAAI,IAAK;EAC1B,OAAO;IACHC,IAAI,EAAEJ,YAAY;IAClBG,IAAI,EAAEA;EACV,CAAC;AACL,CAAC;AAED,MAAME,YAAY,GAAIC,KAAK,IAAK;EAC5B;EACA,OAAO;IACPF,IAAI,EAAEH,aAAa;IACnBK,KAAK,EAAEA;EACP,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC/B,OAAOA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEF,KAAK,GAAGG,MAAM,CAACC,MAAM,CAACF,KAAK,CAACF,KAAK,CAAC,GAAG,EAAE;AACzD,CAAC;AAED,OAAO,MAAMK,SAAS,GAAIC,MAAM,IAAK,MAAMC,QAAQ,IAAI;EACnD,MAAMC,GAAG,GAAGhB,SAAS,CAAE,cAAac,MAAO,EAAC,EAAE;IAC1CG,MAAM,EAAE;EACZ,CAAC,CAAC;EAEF,IAAID,GAAG,CAACE,EAAE,EAAE;IACR,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;IAC7BL,QAAQ,CAACX,WAAW,CAACe,IAAI,CAAC,CAAC;EAC/B;AACJ,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAM,MAAMN,QAAQ,IAAI;EACjD,MAAMC,GAAG,GAAGhB,SAAS,CAAE,YAAW,EAAE;IAChCiB,MAAM,EAAE;EACZ,CAAC,CAAC;EACF;EACA,IAAID,GAAG,CAACE,EAAE,EAAE;IACR,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;IAC7B;IACAL,QAAQ,CAACR,YAAY,CAACY,IAAI,CAACX,KAAK,CAAC,CAAC;EACtC;AACJ,CAAC;AAED,MAAMc,YAAY,GAAG,YAAsB;EAAA,IAArBZ,KAAK,uEAAC,CAAC,CAAC;EAAA,IAAEa,MAAM;EAClCZ,MAAM,CAACa,MAAM,CAACd,KAAK,CAAC;EACpB,IAAIe,SAAS,GAAG;IAAE,GAAGf;EAAM,CAAC;EAC5B;EACA,QAAQa,MAAM,CAACjB,IAAI;IACf,KAAKJ,YAAY;MACbuB,SAAS,CAACF,MAAM,CAAClB,IAAI,CAACqB,EAAE,CAAC,GAAGH,MAAM,CAAClB,IAAI;MACvC,OAAOoB,SAAS;IACpB,KAAKtB,aAAa;MACd;MACAsB,SAAS,GAAG;QAAE,GAAGf,KAAK;QAAE,GAAGa,MAAM,CAACf;MAAK,CAAC;MACxC;MACA,OAAOiB,SAAS;IACpB,KAAKxB,gBAAgB;MACjBwB,SAAS,CAACF,MAAM,CAACI,OAAO,CAACC,KAAK,CAACF,EAAE,CAAC,GAAGH,MAAM,CAACI,OAAO,CAACC,KAAK;IAC7D;MACI,OAAOlB,KAAK;EAAA;AAExB,CAAC;AAED,eAAeY,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}