{"ast":null,"code":"var _jsxFileName = \"/Users/zane/Desktop/GitHub/FSP/frontend/src/components/QuestionsCreate/QuestionsCreate.js\",\n  _s = $RefreshSig$();\nimport \"./QuestionsCreate.css\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as questionActions from \"../../store/questions.js\";\nimport { Link } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsCreate = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [loginRedirect, setloginRedirect] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const asker = useSelector(state => state.session.user);\n  if (!asker) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n  // later: add error slice of state to show that you aren't logged in\n\n  const handleTitle = e => setTitle(e.target.value);\n  const handleBody = e => setBody(e.target.value);\n  const handleSubmit = async e => {\n    debugger;\n    e.preventDefault();\n    await setErrors([]);\n    debugger;\n    await dispatch(questionActions.createQuestion({\n      title,\n      body,\n      asker_id: asker.id\n    }));\n    // // debugger\n    //     .catch(async (res) => {\n    //         let data;\n    //         try {\n    //             data = await  res.clone().json();\n    //         } catch {\n    //             data = await res.text();\n    //         }\n    //         if (data?.errors) {\n    //             setErrors(data.errors)\n    //         } else if (data) {\n    //             setErrors([data])\n    //         } else {\n    //             setErrors([res.statusText])\n    //         }\n    //     })\n    //     debugger\n  };\n\n  const showErrors = inputType => {\n    let errorEl;\n    errors.forEach(error => {\n      if (error.includes(inputType)) {\n        errorEl = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"Error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 27\n        }, this);\n      }\n    });\n    return errorEl;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ask a public question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Title\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Be specific and imagine you're asking a question to another person\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: title,\n          onChange: handleTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Body\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Include all the information someone would need to answer your question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: body,\n          onChange: handleBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post your Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsCreate, \"/b06wPQW8toIY/QL6h2iRyFketI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = QuestionsCreate;\nexport default QuestionsCreate;\nvar _c;\n$RefreshReg$(_c, \"QuestionsCreate\");","map":{"version":3,"names":["useState","useDispatch","useSelector","questionActions","Link","Redirect","QuestionsCreate","dispatch","title","setTitle","body","setBody","loginRedirect","setloginRedirect","errors","setErrors","asker","state","session","user","handleTitle","e","target","value","handleBody","handleSubmit","preventDefault","createQuestion","asker_id","id","showErrors","inputType","errorEl","forEach","error","includes"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/components/QuestionsCreate/QuestionsCreate.js"],"sourcesContent":["import \"./QuestionsCreate.css\"\nimport { useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport * as questionActions from \"../../store/questions.js\"\nimport { Link } from \"react-router-dom\"\nimport { Redirect } from \"react-router-dom\"\n\nconst QuestionsCreate = () => {\n    const dispatch = useDispatch()\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n    const [loginRedirect, setloginRedirect] = useState(false)\n    const [errors, setErrors] = useState([])\n\n    const asker = useSelector((state) => state.session.user)\n\n    if (!asker) {  \n        return <Redirect to='/login'/>\n    }\n        // later: add error slice of state to show that you aren't logged in\n\n    const handleTitle = (e) => setTitle(e.target.value)\n    const handleBody = (e) => setBody(e.target.value)\n\n    const handleSubmit = async (e) => {\n        debugger\n        e.preventDefault()\n        await setErrors([]);\n        debugger\n        await dispatch(questionActions.createQuestion({title, body, asker_id: asker.id}))\n        // // debugger\n        //     .catch(async (res) => {\n        //         let data;\n        //         try {\n        //             data = await  res.clone().json();\n        //         } catch {\n        //             data = await res.text();\n        //         }\n        //         if (data?.errors) {\n        //             setErrors(data.errors)\n        //         } else if (data) {\n        //             setErrors([data])\n        //         } else {\n        //             setErrors([res.statusText])\n        //         }\n        //     })\n        //     debugger\n    }\n\n    const showErrors = (inputType) => {\n        let errorEl;\n\n        errors.forEach((error) => {\n            if (error.includes(inputType)) {\n                errorEl = <ul className='Error'>{error}</ul>\n            }\n        })\n        return errorEl\n    }\n\n    return (\n        <div>\n            <h1>Ask a public question</h1>\n            <form onSubmit={handleSubmit}>\n                <label>Title \n                    <span>Be specific and imagine you're asking a question to another person</span>\n                    <input type='text'\n                        value={title}\n                        onChange={handleTitle}\n                    />\n                </label>\n                <label>Body \n                    <span>Include all the information someone would need to answer your question</span>\n                    <textarea\n                        value={body}\n                        onChange={handleBody}\n                    />\n                </label>\n                <button type='submit'>Post your Question</button>\n            </form>\n        </div>\n    )\n}\n\nexport default QuestionsCreate"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}