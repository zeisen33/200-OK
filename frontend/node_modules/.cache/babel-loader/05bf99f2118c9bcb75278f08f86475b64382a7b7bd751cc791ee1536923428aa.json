{"ast":null,"code":"const csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method   \n  if (!options.headers) {\n    options['headers'] = {};\n  }\n\n  // set options.method to 'GET' if there is no method\n  if (!options.method) {\n    options['method'] = 'GET';\n  }\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n  // \"X-CSRF-Token\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  // call fetch with the url and the updated options hash\n  const res = await fetch(url, options);\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n};\nexport const restoreCSRF = async () => {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  return response;\n};\nexport const storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nexport default csrfFetch;","map":{"version":3,"names":["csrfFetch","url","options","headers","method","toUpperCase","sessionStorage","getItem","res","fetch","status","restoreCSRF","response","storeCSRFToken","csrfToken","get","setItem"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/csrf.js"],"sourcesContent":["const csrfFetch = async (url, options={}) => {\n    // set options.method to 'GET' if there is no method   \n    if (!options.headers) {\n        options['headers'] = {}\n    }\n    \n    // set options.method to 'GET' if there is no method\n    if (!options.method) {\n        options['method'] = 'GET'\n    }\n\n    // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\" and the \"X-CSRF-Token\" header to the value of the \n    // \"X-CSRF-Token\" cookie\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n        options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n    }\n\n    // call fetch with the url and the updated options hash\n    const res = await fetch(url, options);\n    // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n    if (res.status >= 400) throw res;\n    \n    // if the response status code is under 400, then return the response to the\n    // next promise chain\n    return res\n}\n\nexport const restoreCSRF = async () => {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response);\n    return response;\n}\n\nexport const storeCSRFToken = (response) => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\nexport default csrfFetch"],"mappings":"AAAA,MAAMA,SAAS,GAAG,gBAAOC,GAAG,EAAiB;EAAA,IAAfC,OAAO,uEAAC,CAAC,CAAC;EACpC;EACA,IAAI,CAACA,OAAO,CAACC,OAAO,EAAE;IAClBD,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;EAC3B;;EAEA;EACA,IAAI,CAACA,OAAO,CAACE,MAAM,EAAE;IACjBF,OAAO,CAAC,QAAQ,CAAC,GAAG,KAAK;EAC7B;;EAEA;EACA;EACA;EACA,IAAIA,OAAO,CAACE,MAAM,CAACC,WAAW,EAAE,KAAK,KAAK,EAAE;IACxCH,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAGD,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACvFD,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAGG,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;EAC5E;;EAEA;EACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,OAAO,CAAC;EACrC;EACA;EACA,IAAIM,GAAG,CAACE,MAAM,IAAI,GAAG,EAAE,MAAMF,GAAG;;EAEhC;EACA;EACA,OAAOA,GAAG;AACd,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,YAAY;EACnC,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAc,CAAC;EAChDa,cAAc,CAACD,QAAQ,CAAC;EACxB,OAAOA,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAID,QAAQ,IAAK;EACxC,MAAME,SAAS,GAAGF,QAAQ,CAACT,OAAO,CAACY,GAAG,CAAC,cAAc,CAAC;EACtD,IAAID,SAAS,EAAER,cAAc,CAACU,OAAO,CAAC,cAAc,EAAEF,SAAS,CAAC;AACpE,CAAC;AAED,eAAed,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}