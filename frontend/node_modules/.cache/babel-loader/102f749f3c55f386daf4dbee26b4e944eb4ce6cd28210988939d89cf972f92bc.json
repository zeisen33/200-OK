{"ast":null,"code":"import csrfFetch from \"./csrf\";\nconst RECEIVE_QUESTIONS = '/api/RECEIVE_QUESTIONS';\nconst RECEIVE_QUESTION = '/api/RECEIVE_QUESTION';\nexport const receiveQuestion = question => {\n  // debugger\n  return {\n    type: RECEIVE_QUESTION,\n    question: question\n  };\n};\nexport const receiveQuestions = questions => {\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions: questions\n    // users: data.users\n  };\n};\n\nexport const getQuestion = questionId => state => {\n  return state !== null && state !== void 0 && state.questions ? state.questions[questionId] : null;\n};\nexport const getQuestions = state => {\n  return state !== null && state !== void 0 && state.questions ? Object.values(state.questions) : [];\n};\nexport const fetchAllQuestions = () => async dispatch => {\n  // debugger\n  const response = await csrfFetch('/api/questions', {\n    method: 'GET'\n    // debugger\n  });\n\n  const data = await response.json();\n  // debugger\n  dispatch(receiveQuestions(data));\n  dispatch(fetchAllUsers);\n};\nexport const fetchQuestion = questionId => async dispatch => {\n  const response = await csrfFetch(`/api/questions/${questionId}`, {\n    method: 'GET'\n  });\n  const data = await response.json();\n  // debugger\n  // data.question maybe\n  dispatch(receiveQuestion(data.questions));\n};\nconst questionsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // debugger\n  Object.freeze(state);\n  let nextState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_QUESTIONS:\n      nextState = {\n        ...state,\n        ...action.questions\n      };\n      return nextState;\n    case RECEIVE_QUESTION:\n      nextState[action.question.id] = action.question;\n      return nextState;\n    default:\n      return state;\n  }\n};\nexport default questionsReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_QUESTIONS","RECEIVE_QUESTION","receiveQuestion","question","type","receiveQuestions","questions","getQuestion","questionId","state","getQuestions","Object","values","fetchAllQuestions","dispatch","response","method","data","json","fetchAllUsers","fetchQuestion","questionsReducer","action","freeze","nextState","id"],"sources":["/Users/zane/Desktop/GitHub/FSP/frontend/src/store/questions.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\n\nconst RECEIVE_QUESTIONS = '/api/RECEIVE_QUESTIONS'\nconst RECEIVE_QUESTION = '/api/RECEIVE_QUESTION'\n\nexport const receiveQuestion = (question) => {\n    // debugger\n    return {\n        type: RECEIVE_QUESTION,\n        question: question\n    }\n}\n\nexport const receiveQuestions = (questions) => {\n    return {\n        type: RECEIVE_QUESTIONS,\n        questions: questions\n        // users: data.users\n    }\n}\n\nexport const getQuestion = (questionId) => (state) => {\n    return state?.questions ? state.questions[questionId] : null;\n}\n\nexport const getQuestions = (state) => {\n    return state?.questions ? Object.values(state.questions) : []\n}\n\nexport const fetchAllQuestions = () => async (dispatch) => {\n    // debugger\n    const response = await csrfFetch('/api/questions', {\n        method: 'GET'\n        // debugger\n        })\n    \n    const data = await response.json()\n    // debugger\n    dispatch(receiveQuestions(data))\n    dispatch(fetchAllUsers)\n}\n\nexport const fetchQuestion = (questionId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/questions/${questionId}`, {\n        method: 'GET'\n    })\n\n    const data = await response.json()\n    // debugger\n    // data.question maybe\n    dispatch(receiveQuestion(data.questions))\n\n}\n\n\nconst questionsReducer = (state={}, action) => {\n    // debugger\n    Object.freeze(state);\n    let nextState = { ...state };\n\n    switch (action.type) {\n        case RECEIVE_QUESTIONS:\n            nextState = { ...state, ...action.questions} \n            return nextState\n        case RECEIVE_QUESTION:\n            nextState[action.question.id] = action.question\n            return nextState\n        default:\n            return state\n    }\n\n}\n\nexport default questionsReducer"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,MAAMC,iBAAiB,GAAG,wBAAwB;AAClD,MAAMC,gBAAgB,GAAG,uBAAuB;AAEhD,OAAO,MAAMC,eAAe,GAAIC,QAAQ,IAAK;EACzC;EACA,OAAO;IACHC,IAAI,EAAEH,gBAAgB;IACtBE,QAAQ,EAAEA;EACd,CAAC;AACL,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,SAAS,IAAK;EAC3C,OAAO;IACHF,IAAI,EAAEJ,iBAAiB;IACvBM,SAAS,EAAEA;IACX;EACJ,CAAC;AACL,CAAC;;AAED,OAAO,MAAMC,WAAW,GAAIC,UAAU,IAAMC,KAAK,IAAK;EAClD,OAAOA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEH,SAAS,GAAGG,KAAK,CAACH,SAAS,CAACE,UAAU,CAAC,GAAG,IAAI;AAChE,CAAC;AAED,OAAO,MAAME,YAAY,GAAID,KAAK,IAAK;EACnC,OAAOA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEH,SAAS,GAAGK,MAAM,CAACC,MAAM,CAACH,KAAK,CAACH,SAAS,CAAC,GAAG,EAAE;AACjE,CAAC;AAED,OAAO,MAAMO,iBAAiB,GAAG,MAAM,MAAOC,QAAQ,IAAK;EACvD;EACA,MAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAAC,gBAAgB,EAAE;IAC/CiB,MAAM,EAAE;IACR;EACA,CAAC,CAAC;;EAEN,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClC;EACAJ,QAAQ,CAACT,gBAAgB,CAACY,IAAI,CAAC,CAAC;EAChCH,QAAQ,CAACK,aAAa,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIZ,UAAU,IAAK,MAAOM,QAAQ,IAAK;EAC7D,MAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAAE,kBAAiBS,UAAW,EAAC,EAAE;IAC7DQ,MAAM,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClC;EACA;EACAJ,QAAQ,CAACZ,eAAe,CAACe,IAAI,CAACX,SAAS,CAAC,CAAC;AAE7C,CAAC;AAGD,MAAMe,gBAAgB,GAAG,YAAsB;EAAA,IAArBZ,KAAK,uEAAC,CAAC,CAAC;EAAA,IAAEa,MAAM;EACtC;EACAX,MAAM,CAACY,MAAM,CAACd,KAAK,CAAC;EACpB,IAAIe,SAAS,GAAG;IAAE,GAAGf;EAAM,CAAC;EAE5B,QAAQa,MAAM,CAAClB,IAAI;IACf,KAAKJ,iBAAiB;MAClBwB,SAAS,GAAG;QAAE,GAAGf,KAAK;QAAE,GAAGa,MAAM,CAAChB;MAAS,CAAC;MAC5C,OAAOkB,SAAS;IACpB,KAAKvB,gBAAgB;MACjBuB,SAAS,CAACF,MAAM,CAACnB,QAAQ,CAACsB,EAAE,CAAC,GAAGH,MAAM,CAACnB,QAAQ;MAC/C,OAAOqB,SAAS;IACpB;MACI,OAAOf,KAAK;EAAA;AAGxB,CAAC;AAED,eAAeY,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}